#Parallel Merge

def merge_sort(arr):
 if len(arr) <= 1:
 return arr

 mid = len(arr) // 2
 left = arr[:mid]
 right = arr[mid:]

 left = merge_sort(left)
 right = merge_sort(right)
 return merge(left, right)

def merge(left, right):
 result = []
 i = j = 0

 while i < len(left) and j < len(right):
 if left[i] < right[j]:
 result.append(left[i])
 i += 1
 else:
 result.append(right[j])
 j += 1

 result += left[i:]
 result += right[j:]

 return result
arr = [4, 7, 1, 3, 9, 2, 8, 5, 6]
sorted_arr = merge_sort(arr)
print(sorted_arr) 



#Parallel Bubble
import multiprocessing as mp
def bubble_sort(arr):
 n = len(arr)
 for i in range(n):
    for j in range(n-i-1):
        if arr[j] > arr[j+1]:
            arr[j], arr[j+1] = arr[j+1], arr[j]
 return arr
def parallel_bubble_sort(arr, num_procs=None):
 if num_procs is None:
    num_procs = mp.cpu_count()
 chunks = [arr[i::num_procs] for i in range(num_procs)]
 with mp.Pool(num_procs) as pool:
    sorted_chunks = pool.map(bubble_sort, chunks)
 while len(sorted_chunks) > 1:
    next_chunks = []
    for i in range(0, len(sorted_chunks), 2):
        if i == len(sorted_chunks) - 1:
            next_chunks.append(sorted_chunks[i])
        else:
            merged = sorted_chunks[i] + sorted_chunks[i+1]
            next_chunks.append(bubble_sort(merged))
    sorted_chunks = next_chunks
 return sorted_chunks[0]
if __name__ == '__main__':
 arr = [3, 2, 1, 5, 4]
 print(parallel_bubble_sort(arr))
